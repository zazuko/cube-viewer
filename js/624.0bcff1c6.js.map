{"version":3,"file":"js/624.0bcff1c6.js","mappings":"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","sources":["webpack://cube-viewer/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://cube-viewer/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/index.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://cube-viewer/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const parts = [\n      cleanup(quad.subject),\n      cleanup(quad.predicate),\n      cleanup(quad.object),\n      cleanup(quad.graph)\n    ]\n\n    if (parts[0] || parts[1] || parts[2] || parts[3]) {\n      return factory.quad(...parts)\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","parts","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","__createBinding","this","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","ContextTree","subTrees","getContext","keys","head","tail","subTree","subContext","then","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","Util_1","http_link_header_1","readableObjectMode","parsingContext","ParsingContext","assign","util","Util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","Promise","resolve","attachJsonParserListeners","mode","Error","static","mediaType","headers","endsWith","ErrorCoded","ERROR_CODES","LOADING_DOCUMENT_FAILED","has","key","linkHeader","parse","link","MULTIPLE_CONTEXT_LINK_HEADERS","uri","ignoreMissingContextLinkHeader","contentType","match","exec","import","stream","output","PassThrough","error","parsed","data","push","_transform","chunk","write","async","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","isValidKeyword","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","i","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","test","handle","isStackProcessor","processingStack","Array","isArray","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","blankNode","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","validate","isPropertyHandler","onValue","stack","fill","map","v","isParsingContextInner","valueJobCb","newOnValueJob","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","sort","job1","job2","sortedApplicableTypeJobIds","jobId","DEFAULT_PROCESSING_MODE","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ErrorCoded_1","ContextTree_1","JsonLdParser_1","contextParser","ContextParser","documentLoader","skipValidation","skipContextValidation","produceGeneralizedRdf","allowSubjectList","processingMode","strictValues","defaultGraph","rdfDirection","normalizeLanguageTags","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","validateContext","JsonLdContextNormalized","parentContext","ignoreProtection","activeVersion","getContextRaw","PROCESSING_MODE_CONFLICT","INVALID_VERSION_VALUE","offset","keysOriginal","contextData","getContextPropagationAware","contextRaw","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","buffer","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","rdf_data_factory_1","canonicalizeJson","DataFactory","rdfFirst","RDF","rdfType","rdfJson","contextKey","fallback","entry","type","getContextValue","valueType","isContextValueReverse","isValidIri","needle","haystack","indexHashes","id","index","existingIndexValue","CONFLICTING_INDEXES","getContextValueType","literal","valueToJsonString","getContextValueContainer","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","JSON","stringify","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","validateLanguage","INVALID_LANGUAGE_TAGGED_STRING","toLowerCase","validateDirection","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","valueToTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","values","resourceToTerm","stringValueToTerm","Boolean","toString","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","expandTerm","substr","INVALID_IRI_MAPPING","expandOptions","intToString","datatype","Number","isFinite","isInteger","toExponential","replace","defaultDatatype","contextType","contextLanguage","getContextValueLanguage","contextDirection","getContextValueDirection","language","direction","valueNode","disableCache","cachedUnaliasedKeyword","isPotentialKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","some","equals","handlePendingContainerFlushBuffers","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","INVALID_TERM_DEFINITION","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","getPropertiesDepth","depthPropertiesGraph","atGraph","objects","isPropertyReverse","listValueContainer","EntryHandlerKeyword","keyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","INVALID_NEST_VALUE","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","errorCode","INVALID_REVERSE_VALUE"],"sourceRoot":""}